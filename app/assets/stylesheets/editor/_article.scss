$editor-section-header-input-font-size: 20pt;
$editor-section-header-input-font-weight: 700;

$editor-section-block-lock-color: hsl(0, 0%, 75%);
$editor-section-block-lock-font-size: 15pt;

$editor-identity-item-background-color: hsl(0, 0%, 96%);

$editor-person-button-green: hsl(136, 52%, 51%);
$editor-person-button-red: hsl(1, 76%, 54%);


// Vacancy flag
//
@mixin vacancy-flag($height, $width, $color) {
  background-color: $color;
  height: $height - $width;
  width: $width;
  
  &::after {
    border: $width / 2 solid $color;
    border-bottom-color: transparent;
    bottom: - $width;
    content: '';
    height: $width;
    left: 0;
    position: absolute;
    width: $width;
  }
}


// Editor section header input
@mixin editor-section-header-input {
  @include placeholder {
    font-style: italic;
  }
  
  border: none;
  font-size: $editor-section-header-input-font-size;
  font-weight: $editor-section-header-input-font-weight;
  outline: none;
  padding: 0;
  
  &:disabled {
    @include placeholder {
      color: hsl(0, 0%, 0%);
      font-style: normal;
      font-weight: 300;
    }
  }
}


// Editor paragraph block
@mixin editor-paragraph-block {
  font-size: 15pt;
  margin: 0;
  padding: 0;
  position: relative;
  
  > div {
    margin: 0;
    outline: none;

    &:empty:before {
      content: attr(data-placeholder);
      font-style: italic;
      opacity: .25;
    }
  }
}


// Editor image block
@mixin editor-image-block {
  position: relative;
  
  > input[type="file"] {
    @include position(absolute, 0px 0px 0px 0px);
    opacity: 0;
  }
  
  > img {
    width: 100%;
  }
  
  > .placeholder {
    @include display(flex);
    @include flex-direction(column);
    @include align-items(center);
    @include justify-content(center);
    
    background-color: hsl(0, 0%, 75%);
    border: 1pt solid hsl(0, 0%, 0%);
    height: $base-unit * 20;
    opacity: .3;
    
    header {
      font-size: 15pt;
      font-weight: 700;
      position: relative;
      width: $base-unit * 12;
      
      i {
        margin-right: $base-unit / 2;
        right: 100%;
        position: absolute;
      }
    }
    
    p {
      font-size: 12pt;
      margin: $base-unit / 2 0 0;
      width: $base-unit * 12;
    }
  }

  > button.delete {
    @include position(absolute, $base-unit $base-unit 0 0);
    
    visibility: hidden;
  }

  &:hover > button.delete {
    visibility: visible;
  }
  
}


$list-identity-item-height: $base-unit * 1.75;

$list-identity-item-icon-font-size: $list-identity-item-height * .5;
$list-identity-item-icon-font-weight: 300;

$list-identity-item-name-font-size: 12pt;
$list-identity-item-name-font-weight: 300;

$list-identity-item-occupation-font-size: 7pt;
$list-identity-item-occupation-font-weight: 100;

// Identity item
//
@mixin list-identity-item($padding: 0px) {
  @include display(flex);
  @include flex-direction(column);
  @include justify-content(center);
  
  $n: length($padding);
  
  $padding-top:     0;
  $padding-right:   0;
  $padding-bottom:  0;
  $padding-left:    0;

  @if $n == 1 { $padding-top: nth($padding, 1); $padding-right: nth($padding, 1); $padding-bottom: nth($padding, 1); $padding-left: nth($padding, 1); }
  @if $n == 2 { $padding-top: nth($padding, 1); $padding-right: nth($padding, 2); $padding-bottom: nth($padding, 1); $padding-left: nth($padding, 2); }
  @if $n == 3 { $padding-top: nth($padding, 1); $padding-right: nth($padding, 2); $padding-bottom: nth($padding, 3); $padding-left: nth($padding, 2); }
  @if $n == 4 { $padding-top: nth($padding, 1); $padding-right: nth($padding, 2); $padding-bottom: nth($padding, 3); $padding-left: nth($padding, 4); }
  
  padding: $padding-top $padding-right $padding-bottom $padding-left;
  padding-left: $list-identity-item-height + $base-unit / 2 + $padding-left;
  position: relative;
  height: $list-identity-item-height + $padding-top + $padding-bottom;
  
  aside {
    @include position(absolute, $padding-top 0 0 $padding-left);
    
    border-radius: $list-identity-item-height / 2;
    color: hsl(0, 0%, 100%);
    font-size: $list-identity-item-icon-font-size;
    font-weight: $list-identity-item-icon-font-weight;
    line-height: $list-identity-item-height;
    width: $list-identity-item-height;
    height: $list-identity-item-height;
    text-align: center;
  }
  
  .title,
  .note {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: 100%;
  }
  
  .title {
    font-size: $list-identity-item-name-font-size;
    font-size: $list-identity-item-name-font-weight;
  }

  .note {
    font-size: $list-identity-item-occupation-font-size;
    font-size: $list-identity-item-occupation-font-weight;
    text-transform: uppercase;
  }
  
  &:hover {
    background-color: hsla(0, 0%, 0%, .1);
  }
  
}


$editor-identity-selector-search-input-border-width: 3pt;
$editor-identity-selector-search-input-font-size: 12pt;
$editor-identity-selector-search-input-padding: 4pt;


// Editor identity selector
//
@mixin editor-identity-selector {
  
  input.identity-search {
    border: $editor-identity-selector-search-input-border-width solid $editor-identity-item-background-color;
    border-bottom-width: 0;
    font-size: $editor-identity-selector-search-input-font-size;
    outline: none;
    padding: $editor-identity-selector-search-input-padding;
    position: relative;
    width: 100%;
  }
  
  ul.identity-list {
    @include flex(1);

    list-style: none;
    margin: 0;
    overflow-x: hidden;
    overflow-y: scroll;
    padding: 0;
    position: relative;
    width: 100%;
    
    > li {
      @include list-identity-item(3pt);

      cursor: pointer;
    }
  }
}


// Identity item
@mixin editor-identity-item($count: 3) {
  float: left;
  height: 0;
  padding-bottom: 100% / $count;
  position: relative;
  width: 100% / $count;
  
  > * {
    @include display(flex);
    @include flex-direction(column);
    @include align-items(center);
    @include position(absolute, $base-unit 0px 0px 0px);
    
    background-color: $editor-identity-item-background-color;
    margin: 0 $base-unit / 2;
  }
  
  &:nth-child(#{$count}n+1) > * {
    margin-left: 0;
  }
  
  &:nth-child(#{$count}n) > * {
    margin-right: 0;
  }
}


// Person button
@mixin editor-person-button {
  border: none;
  color: hsl(0, 0%, 100%);
  font-size: 8pt;
  line-height: 2em;
  padding: 0;
  text-transform: uppercase;
}


// Identity item
//
@mixin editor-identity-block-item {
  @include align-items(flex-start);
  @include justify-content(flex-end);

  button {
    @include editor-person-button;
    @include transition(opacity 100ms ease-out);
    
    visibility: hidden;
    opacity: 0;
  }
  
  &:hover button {
    visibility: visible;
    opacity: 1;
  }
  
  button.delete {
    @include position(absolute, $base-unit / 2 50% 0 $base-unit / 2);

    background-color: $editor-person-button-red;
    margin-right: $base-unit / 4;
  }
  
  button.change {
    @include position(absolute, $base-unit / 2 $base-unit / 2 0 50%);
    
    background-color: $editor-person-button-green;
    margin-left: $base-unit / 4;
  }

  p.title,
  p.note {
    background-color: hsla(0, 0%, 50%, .25);
    color: hsl(0, 0%, 100%);
    margin: 0;
    padding: $base-unit / 2;
    width: 100%;
  }
  
  p.title {
    font-size: 15pt;
    overflow: hidden;
    padding-bottom: 0;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  p.note {
    font-size: 10pt;
    padding-top: 0;
    text-transform: uppercase;
  }
}


// Editor person block
@mixin editor-people-block {
  @include clearfix;
  
  margin-top: -$base-unit;

  > .container {
    @include editor-identity-item(4);
    
    .person {
      @include editor-identity-block-item;
    }
    
    .identity-selector {
      @include editor-identity-selector;
    }
  }
  
}


// Editor vacancies block
//
@mixin editor-vacancies-block {
  @include clearfix;
  
  margin-top: -$base-unit;
  
  > .container {
    @include editor-identity-item(4);
    
    > .vacancy {
      @include editor-identity-block-item;

      background-color: hsl(1, 76%, 54%);
      
      button.delete {
        background-color: hsl(0, 0%, 100%);
        color: $editor-person-button-red;
      }
      
      .flag {
        @include vacancy-flag(30pt, 17pt, hsl(0, 0%, 100%));
        @include position(absolute, 0px $base-unit / 2 0 0);
      }
    }

    .identity-selector {
      @include editor-identity-selector;
      
      .vacancy aside {
        background-color: HSLA(1, 76%, 54%, 1);
        font-size: 11pt !important;
      }
    }
  }
}


// Editor article
article.editor {
  margin: 0 $base-unit * 5;
  padding: $base-unit * 2 $base-unit * 5;
  
  > section {
    
    padding: 0 0 $base-unit * 2;
    
    > header {
      
      input {
        @include editor-section-header-input;
        width: 100%;
      }
      
    }
    
    
    > .section-block {
      padding-top: $base-unit;
      position: relative;
      
      > .lock {
        @include position(absolute, 50% 100% 0 0);

        color: $editor-section-block-lock-color;
        font-size: $editor-section-block-lock-font-size;
        margin-top: - $editor-section-block-lock-font-size / 2;
        margin-right: $base-unit;
      }
      
      > .default {
        border: 1pt dashed hsl(0, 0%, 0%);
        font-size: 15pt;
        font-style: italic;
        font-weight: 600;
        margin-top: $base-unit;
        opacity: .25;
        padding: $base-unit;
      }
      
      > .paragraph {
        @include editor-paragraph-block;
      }
      
      > .image {
        @include editor-image-block;
      }

      > .people {
        @include editor-people-block;
      }

      > .vacancies {
        @include editor-vacancies-block;
      }
    }
    
    
    > .new-block-placeholder {
      border: 2px dashed #eee;
      margin-top: $base-unit;
      padding: $base-unit;
    }
    
  }
  
}
